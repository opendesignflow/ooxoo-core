/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package org.odfi.ooxoo.gradle.plugin

import org.gradle.api.Project
import org.gradle.api.Plugin
import org.gradle.api.file.DirectoryProperty
import org.gradle.api.file.RegularFile
import org.gradle.api.model.ObjectFactory
import org.gradle.api.plugins.JavaPluginConvention
import org.gradle.api.plugins.scala.ScalaPlugin
import org.gradle.api.provider.Provider
import org.gradle.api.tasks.OutputDirectory
import org.gradle.workers.WorkerExecutor
import javax.inject.Inject

/**
 * A simple 'hello world' plugin.
 */
class OoxooGradlePluginPlugin : Plugin<Project> {

    /*@OutputDirectory
    abstract fun getDestinationDirectory(): DirectoryProperty?*/

    @Inject
    var workerExecutor: WorkerExecutor? = null
    //abstract fun getWorkerExecutor(): WorkerExecutor?

    override fun apply(project: Project) {
        // Register a task
        project.tasks.register("generateOOXOO" , XGenerate::class.java) { task ->

            /*


            task.doLast {


                // val workQueue = getWorkerExecutor()?.noIsolation()

                println("Worker: " + workerExecutor)
                println("Hello from plugin 'org.odfi.ooxoo.gradle.plugin.greeting'")
                println("Output for Classes: " + project.buildDir)
                var sPlugin = project.convention.getPlugin<JavaPluginConvention>(JavaPluginConvention::class.java)
                sPlugin.sourceSets.asMap.forEach {
                    println("Source set: ${it.key} -> ${it.value}")
                    it.value.allSource.srcDirs.forEach {
                        println("- dir: " + it.path)
                    }

                    if (it.key == "main") {

                        println("All Scala: " + it.value.allSource.files)
                        it.value.allSource.files.filter { it.name.endsWith("xmodel.scala") }.forEach { modelFile ->

                            // Get Output Dir
                            val targetDir = project.buildDir

                            // Submit
                            /* workQueue?.submit(GeneratorFromModel::class.java) { parameters ->

                                 parameters.getBuildOutput()?.set(targetDir)
                                 parameters.getModelFile()?.set(modelFile)

                             }*/


                        }
                    }
                }

                // Add Scala files
                println("All scala prop: " + project.properties.get("allScala"))
            }*/
        }
    }
}
